version: '3.7'

x-container-common: &container-common
  restart: ${CONTAINER_RESTART-on-failure}
  networks:
    - orchestrate

x-postgres-common: &postgres-common
  environment:
    POSTGRES_PASSWORD: postgres

services:
  zookeeper:
    <<: *container-common
    image: confluentinc/cp-zookeeper:5.3.0
    ports:
      - ${ZOOKEEPER_EXTERNAL_PORT-2181}:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT-32181}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME-2000}

  kafka:
    <<: *container-common
    image: confluentinc/cp-kafka:5.3.0
    depends_on:
      - zookeeper
    ports:
      - ${KAFKA_EXTERNAL_PORT-9092}:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_CLIENT_PORT-32181}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://${KAFKA_EXTERNAL_HOSTNAME-localhost}:${KAFKA_EXTERNAL_PORT-9092}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL

  redis:
    <<: *container-common
    image: redis:5.0-alpine
    command: redis-server /usr/local/etc/redis/redis.conf
    ports:
      - 6379:6379
    volumes:
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf

  postgres-contract-registry:
    <<: *container-common
    <<: *postgres-common
    image: postgres:10.12-alpine
    ports:
      - 5432
    volumes:
      - db-data-contract-registry:/var/lib/postgresql/data

  postgres-transaction-scheduler:
    <<: *container-common
    <<: *postgres-common
    image: postgres:10.12-alpine
    volumes:
      - db-data-transaction-scheduler:/var/lib/postgresql/data
    ports:
      - 5432

  postgres-chain-registry:
    <<: *container-common
    <<: *postgres-common
    image: postgres:10.12-alpine
    volumes:
      - db-data-chain-registry:/var/lib/postgresql/data
    ports:
      - 5432

  vault:
    <<: *container-common
    image: library/vault:1.1.1
    tty: true
    cap_add:
      - IPC_LOCK
    ports:
      - 9999:8200
    volumes:
      - ./config/hashicorp/config.hcl:/vault/config.hcl:ro
    entrypoint: vault server -config=/vault

  vault-init:
    <<: *container-common
    # image: library/vault:1.1.1
    build: ./config/hashicorp
    environment:
      VAULT_ADDR: ${VAULT_ADDR-http://vault:8200}
    restart: 'no'
    depends_on:
      - vault
    volumes:
      - vault-token:/vault/token
      - ./config/hashicorp/init.sh:/init.sh
    command: sh /init.sh

  jaeger:
    <<: *container-common
    image: jaegertracing/all-in-one:1.8
    environment:
      COLLECTOR_ZIPKIN_HTTP_PORT: 9411
    ports:
      - 5775:5775/udp
      - 6831:6831/udp
      - 6832:6832/udp
      - 5778:5778
      - 16686:16686
      - 14268:14268
      - 9411:9411

  eth-client:
    restart: ${CONTAINER_RESTART-on-failure}
    networks:
      - orchestrate
    image: hyperledger/besu:latest
    command: "--config-file=/config/config.toml"
    ports:
      - 8545:8545
    volumes:
      - ./config/besu/config.toml:/config/config.toml
      - ./config/besu/genesis.json:/config/genesis.json
      - ./config/besu/key:/config/key


  eth-client:
    <<: *container-common
{% if clientType == "gquorum" %}
    image: quorumengineering/quorum:${QUORUM_VERSION:-2.7.0}
    entrypoint:
      - /bin/sh
      - -c
      - |
        geth --datadir "/nodeData" init "/nodeData/genesis.json"
        geth \
        --rpc \
        --rpcaddr "0.0.0.0" \
        --rpcport "${GETH_RPC_PORT-8545}" \
        --rpccorsdomain "*" \
        --rpcvhosts "*" \
        --datadir "/nodeData" \
        --port "${GETH_PORT-30303}" \
        --rpcapi "admin,eth,net,web3,personal,txpool" \
        --networkid ${GETH_NETWORKID-888} \
        --nodiscover \
        --unlock "0" \
        --password "/nodeData/password" \
        --allow-insecure-unlock \
        --mine \
        --debug \
        --ipcdisable \
        --syncmode "full"
    volumes:
      - ./config/gquorum/genesis.json:/nodeData/genesis.json
      - ./config/gquorum/keystore:/nodeData/keystore
      - ./config/gquorum/password:/nodeData/password
      - chain-data:/nodeData/geth
{% else %}
    image: hyperledger/besu:${BESU_VERSION:-latest}
    environment:
      - LOG4J_CONFIGURATION_FILE=/config/log-config.xml
    entrypoint:
      - /bin/bash
      - -c
      - |
        while [ ! -f "/opt/besu/public-keys/bootnode_pubkey" ]; do sleep 5; done ;
        /opt/besu/bin/besu \
        --config-file=/config/config.toml \
        --p2p-host=$$(hostname -i) \
        --genesis-file=/config/genesis.json \
        --node-private-key-file=/opt/besu/keys/key \
        --min-gas-price=0 \
        --rpc-http-api=EEA,WEB3,ETH,NET,PERM,${BESU_CONS_API:-CLIQUE} \
        --rpc-ws-api=EEA,WEB3,ETH,NET,PERM,${BESU_CONS_API:-CLIQUE} ;
    volumes:
      - chain-data:/opt/besu/data
      - ./config/besu/genesis.json:/config/genesis.json
      - ./config/besu/config.toml:/config/config.toml
      - ./config/besu/key:/opt/besu/keys/key
      - ./logs/besu:/var/log/
{% endif %}
    ports:
      - 8545:8545
      - 8546:8546
    networks:
      - orchestrate
    healthcheck:
      test: ["CMD", "wget", "--spider", "--proxy", "off", "http://localhost:8545"]
      interval: 3s
      timeout: 3s
      retries: 10
      start_period: 5s


volumes:
  db-data-contract-registry:
    driver: local
  db-data-transaction-scheduler:
    driver: local
  db-data-chain-registry:
    driver: local
  chain-data:
    driver: local
  vault-token:
    driver: local

networks:
  orchestrate:
    driver: bridge
